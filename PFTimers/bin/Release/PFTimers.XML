<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PFTimers</name>
    </assembly>
    <members>
        <member name="T:PFTimers.PFSystemTimer">
            <summary>
            Class implements .NET system timer processing.
            </summary>
        </member>
        <member name="M:PFTimers.PFSystemTimer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFTimers.PFSystemTimer.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="numSecsInterval">Specifies length in seconds of interval between timer events.</param>
        </member>
        <member name="M:PFTimers.PFSystemTimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:PFTimers.PFSystemTimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:PFTimers.PFSystemTimer.Pause">
            <summary>
            Pauses the timer.
            </summary>
        </member>
        <member name="M:PFTimers.PFSystemTimer.Restart">
            <summary>
            Restarts a paused timer.
            </summary>
        </member>
        <member name="M:PFTimers.PFSystemTimer.SetEventHandler">
            <summary>
            Sets the routine to receive timer alerts.
            </summary>
        </member>
        <member name="E:PFTimers.PFSystemTimer.elapsedTimeStatusReport">
            <summary>
            Event that returns status information for encrypt or decrypt operation to the calling program.
            </summary>
        </member>
        <member name="P:PFTimers.PFSystemTimer.Timer">
            <summary>
            Timer Property.
            </summary>
        </member>
        <member name="P:PFTimers.PFSystemTimer.IntervalInSecs">
            <summary>
            IntervalInSecs Property.
            </summary>
        </member>
        <member name="P:PFTimers.PFSystemTimer.Enabled">
            <summary>
            Enabled Property.
            </summary>
        </member>
        <member name="T:PFTimers.PFSystemTimer.ElapsedTimeReportDelegate">
            <summary>
            Event delegate used for setting up callbacks that report on number of bytes and elapsed time from encryption and decryption methods.
            </summary>
            <param name="elapsedTime">Time elapsed since timer was started.</param>
            <param name="currentTime">Current time.</param>
            <param name="startTime">Time at which timer was started.</param>
        </member>
        <member name="T:PFTimers.StatusTimer">
            <summary>
            Class to manage to frequency with which status events occur. Class uses an internal timer to determine if the interval between status reports has been passed and a new status report is needed.
             Calling program can also retrieve a formatted display of the elapsed time at any point in its processing for display to the user.
            </summary>
        </member>
        <member name="M:PFTimers.StatusTimer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:PFTimers.StatusTimer.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="numSecondsInterval">Number of seconds between each status report.</param>
        </member>
        <member name="M:PFTimers.StatusTimer.Start">
            <summary>
            Begins the timings for status reporting.
            </summary>
        </member>
        <member name="M:PFTimers.StatusTimer.StatusReportDue">
            <summary>
            If true then the interval between status reports has been reached and caller should initiate code to get a revised status report.
            </summary>
            <returns>Boolean.</returns>
        </member>
        <member name="M:PFTimers.StatusTimer.GetFormattedElapsedTime">
            <summary>
            Returns a formatted display of the elapsed time for the current status timer.
            </summary>
            <returns>String containing formatted elapsed time.</returns>
        </member>
        <member name="M:PFTimers.StatusTimer.GetElapsedTime">
            <summary>
            Returns the elapsed time for the current status timer.
            </summary>
            <returns>TimeSpan value.</returns>
        </member>
        <member name="M:PFTimers.StatusTimer.Stop">
            <summary>
            Ends timings for status reporting.
            </summary>
        </member>
        <member name="P:PFTimers.StatusTimer.NumSecondsInterval">
            <summary>
            Number of seconds between each status report.
            </summary>
            <remarks>Default is 5 seconds.</remarks>
        </member>
        <member name="P:PFTimers.StatusTimer.ShowElapsedTimeMilliseconds">
            <summary>
            Property ShowElapsedTimeMilliseconds
            </summary>
        </member>
        <member name="P:PFTimers.StatusTimer.StartDateTime">
            <summary>
            StartDateTime Property.
            </summary>
        </member>
        <member name="P:PFTimers.StatusTimer.EndDateTime">
            <summary>
            EndDateTime Property.
            </summary>
        </member>
        <member name="P:PFTimers.StatusTimer.LastStatusReport">
            <summary>
            LastStatusReport Property.
            </summary>
        </member>
        <member name="P:PFTimers.StatusTimer.CurrentDateTime">
            <summary>
            CurrentDateTime Property.
            </summary>
        </member>
        <member name="P:PFTimers.StatusTimer.StatusTimerIsRunning">
            <summary>
            Returns true if status timer is currently running; otherwise returns false.
            </summary>
        </member>
        <member name="T:PFTimers.WaitTimer">
            <summary>
            Class implementing wait interval functionality.
            </summary>
        </member>
        <member name="M:PFTimers.WaitTimer.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PFTimers.WaitTimer.Wait(System.Int64)">
            <summary>
            Causes current thread to sleep for specified number of seconds.
            </summary>
            <param name="numSecsToWait">Duration in seconds to prolong wait state.</param>
        </member>
        <member name="P:PFTimers.WaitTimer.ThreadSleepInterval">
            <summary>
            Number of milliseconds an instance of this class will sleep to allow other processes cpu time.
            </summary>
        </member>
        <member name="P:PFTimers.WaitTimer.Timer">
            <summary>
            Get or set the value for the system timer used by this class
            </summary>
        </member>
        <member name="T:PFTimers.Stopwatch">
            <summary>
            Class implements functionality to get elapsed time for a section of code.
            </summary>
        </member>
        <member name="M:PFTimers.Stopwatch.Start">
            <summary>
            Begins a timing interval.
            </summary>
        </member>
        <member name="M:PFTimers.Stopwatch.Stop">
            <summary>
            Stop the timer. Marks the end of the timed interval.
            </summary>
        </member>
        <member name="M:PFTimers.Stopwatch.Clear">
            <summary>
            Resets stopwatch by clearing all counters and stopping the watch if it is running.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.StopwatchIsRunning">
            <summary>
            If true, stopwatch is currently doing a timing.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ElapsedDays">
            <summary>
            Returns total elapsed days since stopwatch started.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ElapsedHours">
            <summary>
            Returns total elapsed hours since stopwatch started.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ElapsedMinutes">
            <summary>
            Returns total elapsed minutes since stopwatch started.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ElapsedSeconds">
            <summary>
            Returns total elapsed seconds since stopwatch started.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ElapsedMilliseconds">
            <summary>
            Returns total elapsed milliseconds since stopwatch started.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.FormattedElapsedTime">
            <summary>
            
            Returns string with formatted elapsed time since stopwatch started.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.FormattedStartTime">
            <summary>
            Returns formatted start time.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.FormattedStopTime">
            <summary>
            Returns formatted stop time.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.OutputFormat">
            <summary>
            Type of format to use for output of timings.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.StartTime">
            <summary>
            Returns StartTime as DateTime value.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.StopTime">
            <summary>
            Returns StopTime as DateTime value.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.CurrentTime">
            <summary>
            Returns current time as DateTime value.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ElapsedTime">
            <summary>
            Returns TimeSpan structure containing elapsed time.
            </summary>
        </member>
        <member name="P:PFTimers.Stopwatch.ShowMilliseconds">
            <summary>
            If true, millisecnds will be shown in output. If false, output will only show to seconds.
            </summary>
        </member>
        <member name="T:PFTimers.Stopwatch.StopwatchOutputFormat">
            <summary>
            Specifies how elapsed time output will be formatted.
            </summary>
        </member>
        <member name="F:PFTimers.Stopwatch.StopwatchOutputFormat.Fixed">
            <summary>
            Output looks like ddd:HH:mm:ss.ms (days:hours:minutes:seconds.milliseconds). Example: Elapsed time: 000:00:00:22.651
            </summary>
        </member>
        <member name="F:PFTimers.Stopwatch.StopwatchOutputFormat.String">
            <summary>
            Output will look like: Elapsed time: 1 day 1 hour 5 minutes 21 seconds 291 ms 
            </summary>
        </member>
        <member name="T:PFTimers.IntervalTimer">
            <summary>
            IntervalTimer is used when smallest time slices down to millisends need to be measured. Timing is done using the Win32 API GetTickCount.
            </summary>
        </member>
        <member name="M:PFTimers.IntervalTimer.GetTickCount">
            <summary>
            Use Win32 API GetTickCount. Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days. 
            </summary>
            <returns>The return value is the number of milliseconds that have elapsed since the system was started.</returns>
        </member>
        <member name="M:PFTimers.IntervalTimer.PauseTimer">
            <summary>
            Pause is only valid if the timer is running and the
            timer has not already been paused.
            </summary>
        </member>
        <member name="M:PFTimers.IntervalTimer.StartTimer">
            <summary>
            Begins the timed interval.
            </summary>
            <remarks>If timer is alredy running when this method is called,
             then no changes are made to the time counters. If timer is stopped or paused, a new time interval is started.</remarks>
        </member>
        <member name="M:PFTimers.IntervalTimer.StopTimer">
            <summary>
            Marks the end of timed interval.
            </summary>
        </member>
        <member name="P:PFTimers.IntervalTimer.ElapsedTime">
            <summary>
            ElapsedTime in milliseconds
            </summary>
        </member>
        <member name="P:PFTimers.IntervalTimer.ElapsedTimeInSeconds">
            <summary>
            Elapsed time in seconds.
            </summary>
        </member>
        <member name="P:PFTimers.IntervalTimer.TimerIsPaused">
            <summary>
            Stopwatch is still running but is paused.
            </summary>
        </member>
        <member name="P:PFTimers.IntervalTimer.TimerIsRunning">
            <summary>
            Stopwatch is running.
            </summary>
        </member>
    </members>
</doc>
